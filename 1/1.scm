;;; 10 => simply returns 10

;;; (+ 5 3 4) => 12

;;; (- 9 1) => 8

;;; (/ 6 2) => 3

;;; (+ (* 2 4) (- 4 6)) => (+ 8 -2) => 6

;;; (define a 3) => a = 3

;;; (define b (+ a 1)) => (define b 4) =>  b = 4

;;; (+ a b (* a b)) => (+ 3 4 (* 3 4)) => (+ 3 4 12) => 19 

;;; (= a b) => (= 3 4) => #f

;;; (if (and (> b a) (< b (* a b))) => (if (and (> 4 3) (< 4 (* 3 4))) => (if (and #t (< 4 12)) => (if (and #t #f) => (if #f => 3
;;; 	b				   4 				      4			       4		  4
;;;	a)				   3)				      3) 		       3)		  3)

;;; (cond ((= a 4) 6)		=> (cond ((= 3 4) 6)		=> (cond (#f 6)		=> 16
;;;	  ((= b 4) (+ 6 7 a))     	 ((= 4 4) (+ 6 7 3))		 (#t 16)
;;;	  (else 25))		  	 (else 25))			 (else 25))

;;; (+ 2 (if (> b a) b a))	=> (+ 2 (if (> 4 3) 4 3)) => (+ 2 (if #t 4 3)) => (+ 2 4) => 6

;;; (* (cond ((> a b) a)  	=> (* (cond ((> 3 4) 3)		=> (* (cond (#f 3)	=> (* 4 4) => 16
;;;	     ((< a b) b)		    ((< 3 4) 4)		            (#t 4)
;;;	     (else -1))			    (else -1))			    (else -1))
;;;    (+ a 1))		   	      (+ 3 1))			      4)
